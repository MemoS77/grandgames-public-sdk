type AppUser = {
  id: number
  login?: string
  avatar?: string
}

// Все доступные на GrandGames языки
type AppLang =
  | 'ru'
  | 'en'
  | 'it'
  | 'hr'
  | 'sr'
  | 'uk'
  | 'de'
  | 'be'
  | 'fr'
  | 'pt'
  | 'es'
  | 'ja'
  | 'tr'

export type MainLang = 'ru' | 'en'

export enum EPlatformEvent {
  // Возврат в игру, например после паузы
  RESUME = 'resume',
  // Игра прервана внешним событием, например нажатием паузы в окне, или в будущем - в мобильном клиенте, при уходе приложения в фон
  PAUSE = 'pause',
  // Закончена игра в спортивном игровом режиме, например в турнире уже точно победил сопрерник, или произошло окончание по времени и продолжать нет особого смысла.
  FINISH = 'finish',
}

export default interface IGamesSdk {
  /** Инициализация SDK */
  initEnviroment(): Promise<void>

  /** Уникальный идентификатор пользователя на платформе, определяется в момент инициализации, поэтому доступен без промиса */
  getUserId(): number | null

  /** Полная информация о пользователе.
   * requireAuth - необходимо ли обязательно запросить авторизацию.
   * Разрешение, если требуется, запрашивается независимо от этого флага.
   * Если не авторизован, то ответ - Null */
  getUser(requireAuth?: boolean): Promise<AppUser | null>

  /**  Отправить игроку произвольные данные (WebSockets). Max 2 запроса в секунду. Если sid не задан, то всем игрокам*/
  onEvent(event: EPlatformEvent, handler: () => void): void

  /** Турнир или дуэль. В этом режиме нельзя показывать рекламу в момент активной игры, только в начале или конце
   *  и стоит отключить подсказки и другие вспомагательные возможности */
  isSportMode(): boolean

  /**  Развернуть/свернуть на полный экран. Если не задано, изменить теущий режим */
  fullScreen(mode?: boolean): Promise<void>

  /**  Вибрировать устройство */
  vibro(ms?: number): void

  /**  Получить произвольную строку */
  getItem(key: string): Promise<string | null>

  /**  Сохранить произвольную строку.
   * Представляет собой асинхронная обертка над localStorage и с привязкой к ID игрока.
   * Данные хранятся в браузере локально. Не используйте для хранения прогресса игрока, сохранения уровней и т.п.
   * Только для вспомагательных данных, типа настроек и т.п.
   */
  setItem(key: string, data: string): Promise<void>

  /**  Удалить произвольную строку */
  removeItem(key: string): Promise<void>

  /**  Всплывающее сообщение */
  toast(text: string): void

  /**  Нужно вызывать когда игра/головоломка загружена и готова к взаимодействию */
  ready(): void

  /** Установить количество очков и при необходимости указать, что игрок выиграл, чтобы не вызывать setWin   */
  setScore(score: number, win?: boolean): void

  /** Если у игры есть окончание, то нужно обязательно вызывать при поражении, или если игрок специально прерывает игру средствами игры, например начинает заново */
  loose(): void

  /**  Начать игру, включая начало после перезагрузки */
  start(): void

  /** Победа в игре и ее окончание. Стирает сохранение, в таблице лидеров появляется кубок. */
  setWin(): void

  /**  Игра может узнать текущий язык для локализации */
  getLang(): AppLang

  /**  Запасной язык RU | EN, если игра не поддерживает основной. RU для BY и UK. EN - для всех остальных */
  getFallbackLang(): MainLang

  /** Удалить игровое сохранение, если оно существует */
  clear(): Promise<void>

  /** Загрузить сохранение. Если нет сохранения, то возвращает ошибку */
  load(): Promise<Object>

  /** Сохранить игровой прогресс
   * Используйте для сохранения пройденных уровней, текущего решения/статуса игры и т.п.
   * Сохраняется на сервере для авторизованного игрока и доступно затем на любом устройстве.
   * Для невавторизованого, сохраняется в закодированом виде в localStorage
   */
  save(data: Object): Promise<void>

  /** Потратить внутриигровую подсказку.
   * Ошибка - подсказки вообще недоступны, например не залогинен игрок или игра запущена в спортивном режиме.
   * false - у игрока больше нет подсказок
   */
  spendTip(): Promise<boolean>
}
